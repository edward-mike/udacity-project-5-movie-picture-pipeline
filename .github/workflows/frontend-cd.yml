# GitHub Actions for Frontend Continuous Deployment

name: 👨‍💻☁️ Frontend Continuous Deployment

on:
  workflow_dispatch:  # Allows manual triggering of the workflow on GitHub console
  push:
    branches:
      - master  # Trigger this event on pushes to the master branch
    paths:
      - 'starter/frontend/**'  # Trigger this event only if files in the frontend directory change


env:
  IMAGE_TAG: latest
  REPO_NAME: frontend
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  EKS_CLUSTER: cluster
  AWS_REGION: us-east-1

jobs:
  Setup:
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4

      - name: 🚀 Install Node.js and Dependencies
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      - name: 📦 Install Project Dependencies
        working-directory: starter/frontend
        run: npm ci

  Linting:
    runs-on: ubuntu-latest
    needs: Setup  # Ensure setup job completes first

    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🚀 Install Node.js and Dependencies
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      - name: 📦 Install Project Dependencies
        working-directory: starter/frontend
        run: npm ci  # Clean install of project dependencies

      - name: 🔍 Run Lint
        run: cd starter/frontend && npm run lint  # Run linting on the frontend directory

  Test:
    runs-on: ubuntu-latest
    needs: Setup  # Ensure setup job completes first

    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🚀 Install Node.js and Dependencies
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      - name: 📦 Install Project Dependencies
        working-directory: starter/frontend
        run: npm ci  # Clean install of project dependencies

      - name: 🧪 Run Tests
        run: cd starter/frontend && npm run test  # Run unit tests in the frontend directory

  Build:
    runs-on: ubuntu-latest
    needs: [Linting, Test]  # Runs only after linting and testing succeed

    steps:
      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${AWS_REGION}

      - name: 🔓 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🐳 Build and Push Docker Image to AWS ECR ☁️
        working-directory: starter/frontend
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 \
          --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${REPO_NAME}:${IMAGE_TAG} .
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${REPO_NAME}:${IMAGE_TAG}

      - name: Configure Kubeconfig
        run: aws eks update-kubeconfig --name ${EKS_CLUSTER} --region ${AWS_REGION}

      - name: 🚀 Deploy Docker Image to Amazon EKS ☁️
        working-directory: starter/frontend/k8s
        run: |
          kustomize edit set image frontend=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${REPO_NAME}:${IMAGE_TAG}
          kustomize build | kubectl apply -f -
